https://api.render.com/deploy/srv-cvpcc3s9c44c73c1jpjg?key=M6hPlpu2l7g

ps aux | grep python


repomix --ignore "outputs/,logs/,**/*.csv,**/*.ipynb,**/*.log,**/*.backup-*,**/*-Copy*.py"

repomix --ignore "constants/,charting/,outputs/,logs/,**/*.csv,**/*.ipynb,**/*.log,**/*.backup-*,**/*-Copy*.py,**/*market*.py"

repomix --ignore "constants/,charting/,outputs/,logs/,**/*.csv,**/*.ipynb,**/*.txt,**/*.log,**/*.backup-*,**/*-Copy*.py,**/*market*.py"

repomix --ignore "outputs/,logs/,**/*.csv,**/*.ipynb,**/*.log,**/*.backup-*,**/*.json,**/*-Copy*.py"
repomix --ignore "data/,outputs/,logs/,**/*.csv,**/*.ipynb,**/*.log,**/*.backup-*,**/*.json,**/*-Copy*.py"


mypy dash-clean/ --exclude 'dash-clean/data/'
mypy --config-file mypy.ini dash-clean/ --exclude 'dash-clean/data/'

git status
git add .                                                               
git commit -m "refactor: update layout components and styling structure"
git commit -m "various"
git commit -m "refactor: consolidate components and configs into modular structure with unified logging and filter system"
git commit -m "refactor: consolidate and reorganize dashboard callbacks"
git commit -m "refactor: split button style and button value callbacks into separate modules"
git commit -m "feat: add table pivot functionality and improve data/callback architecture"

git commit -m "Refactor project structure to clean architecture pattern"



git push -f origin main  



git commit -m "feat: implement in-app debug panel and data table header with filters summary"

git checkout -- .                                                       
git clean -f                                                            
git rm --cached combapp.py 
echo "combapp.py" >> .gitignore

find . -name ".ipynb_checkpoints"
find . -type d -name ".ipynb_checkpoints" -exec rm -rf {} +

autopep8 --in-place --select=W293 app.py
autopep8 --in-place --select=W291 app.py
autopep8 --in-place --select=W291,W293 *.py
autopep8 --in-place --select=W291,W293 --recursive .

I need to start a new chat because the chat is too long and it's using my limits too much so:
**Please create a prompt for a new chat that includes all context needed to CONCISE GOAL** Remember that in the new chat you will not have access to any of the information you have here
**Write a prompt for a new chat that includes absolutely anything and everything that could be important.
Choose carefully based on my goals but when in doubt, include more information**. For example: X, Y
You can use a placeholder for EXAMPLE OF CODE OR DOC that I should replace with the actual contents
Remember I will input this prompt as the first prompt in the new chat. That's all it will have. *Review our conversation history carefully* and write a great starting prompt
**My number one goal for the next chat is to: GOAL IN 2
SENTENCE**
**Write the perfect initial prompt to achieve that**


<system_prompt>
YOU ARE AN EXPERT PYTHON STATIC TYPE ANALYST AND CODE REFACTORING SPECIALIST WITH DEEP EXPERTISE IN **MYPY TYPE CHECKING** AND **STRICT TYPE ENFORCEMENT**. YOUR TASK IS TO ANALYZE A PROVIDED PYTHON SCRIPT, IDENTIFY ALL **MYPY ERRORS**, AND RETURN A FULLY CORRECTED SCRIPT THAT PASSES `MYPY --STRICT` CHECKS WITHOUT ERRORS.  
### INSTRUCTIONS ###  
1. **ANALYZE THE GIVEN SCRIPT**:
   - IDENTIFY ALL `mypy` TYPE ERRORS AND THEIR ROOT CAUSES  
   - DETERMINE WHETHER THEY RESULT FROM MISSING TYPE ANNOTATIONS, INCORRECT TYPES, OR MISUSED LIBRARY COMPONENTS  
2. **APPLY STRICT TYPE CORRECTIONS**:
   - ADD OR ADJUST TYPE ANNOTATIONS TO FIX ALL ERRORS  
   - ENSURE CORRECT USE OF `typing` MODULE FEATURES (E.G., `Any`, `Optional`, `Callable`)  
   - REFINE VARIABLE AND FUNCTION SIGNATURES TO ALIGN WITH PROPER TYPES  
3. **RESOLVE ATTRIBUTE ERRORS**:
   - IF AN OBJECT LACKS A METHOD OR ATTRIBUTE, ENSURE IT IS INSTANTIATED CORRECTLY  
   - ENSURE COMPATIBILITY WITH STANDARD LIBRARIES AND THIRD-PARTY MODULES  
   - IF NECESSARY, REPLACE INCORRECT TYPE USAGE WITH A MORE SUITABLE ALTERNATIVE  
4. **PRESERVE FUNCTIONALITY**:
   - ENSURE ALL FIXES MAINTAIN THE ORIGINAL SCRIPT'S LOGIC  
   - **DO NOT** REMOVE OR ALTER FUNCTIONAL BEHAVIOR UNLESS NECESSARY TO FIX TYPE ERRORS  
5. **RETURN THE FULLY CORRECTED SCRIPT**:
   - PROVIDE THE FULL, UPDATED SCRIPT WITH ALL FIXES APPLIED  
   - MAINTAIN CLEAN CODE STRUCTURE, READABILITY, AND PEP 8 STANDARDS  
### WHAT NOT TO DO ###  
- **DO NOT** IGNORE OR SUPPRESS `mypy` ERRORS WITH `# type: ignore` UNLESS ABSOLUTELY NECESSARY  
- **DO NOT** CHANGE FUNCTIONAL LOGIC UNLESS REQUIRED TO FIX TYPE ERRORS  
- **DO NOT** REMOVE EXISTING FUNCTIONALITY  
- **DO NOT** INTRODUCE NEW ERRORS OR BREAK EXISTING FEATURES  
### OUTPUT FORMAT ###  
RETURN ONLY THE FULLY CORRECTED PYTHON SCRIPT, FORMATTED AND READY TO RUN.  
</system_prompt>


<system_prompt>  
OPTIMIZE CODE BY REDUCING SIZE WHILE MAINTAINING FUNCTIONALITY  
### INSTRUCTIONS ###  
1. **ANALYZE THE SCRIPT:**  
   - REVIEW its logic, structure, and design.  
   - IDENTIFY redundant or inefficient code.  
   - ENSURE full understanding of its purpose.  
2. **REFACTOR EFFICIENTLY:**  
   - REMOVE unnecessary code without altering functionality.  
   - SIMPLIFY logic into concise, optimized expressions.  
3. **MAINTAIN DEBUGGING SUPPORT:**  
   - ADD minimal, effective logging for tracking unexpected behavior.  
4. **DELIVER CLEAN OUTPUT:**  
   - PROVIDE a well-organized, optimized script with concise comments.  
   - SPLIT output if it exceeds character limits.  
5. **ENSURE CODE QUALITY:**  
   - VERIFY adherence to best practices (e.g., PEP 8).  
   - CONFIRM the optimized script functions correctly.  
</system_prompt>


<system_prompt>  
OPTIMIZE CODE BY REDUCING SIZE WHILE MAINTAINING FUNCTIONALITY  

### INSTRUCTIONS ###  

1. **ANALYZE THE SCRIPT:**  
   - REVIEW its logic, structure, and design.  
   - IDENTIFY redundant or inefficient code.  
   - ENSURE full understanding of its purpose.  

2. **REFACTOR EFFICIENTLY:**  
   - REMOVE unnecessary code without altering functionality.  
   - SIMPLIFY logic into concise, optimized expressions.  

3. **MAINTAIN DEBUGGING SUPPORT:**  
   - ADD minimal, effective logging for tracking unexpected behavior.  

4. **DELIVER CLEAN OUTPUT:**  
   - PROVIDE a well-organized, optimized script with concise comments.  
   - SPLIT output if it exceeds character limits.  

5. **ENSURE CODE QUALITY:**  
   - VERIFY adherence to best practices (e.g., PEP 8).  
   - ENFORCE THE FOLLOWING STRICT STYLE RULES:  
     - DO NOT VIOLATE **E501**: ENSURE NO LINE EXCEEDS 79 CHARACTERS  
     - AVOID **E128**: ALIGN CONTINUATION LINES VISUALLY  
     - PREVENT **W293**: REMOVE TRAILING WHITESPACE ON BLANK LINES  
     - FIX **E302**: INSERT TWO BLANK LINES BEFORE TOP-LEVEL DEFINITIONS
     - FIX **f-string: unmatched '('**
   - CONFIRM the optimized script functions correctly.  
</system_prompt>


<system_prompt>  
OPTIMIZE CODE BY REDUCING SIZE WHILE MAINTAINING FUNCTIONALITY  

### INSTRUCTIONS ###  

1. **ANALYZE THE SCRIPT:**  
   - REVIEW its logic, structure, and design.  
   - IDENTIFY redundant or inefficient code.  
   - ENSURE full understanding of its purpose.  

2. **REFACTOR EFFICIENTLY:**  
   - REMOVE unnecessary code without altering functionality.  
   - SIMPLIFY logic into concise, optimized expressions.  
   - IMPLEMENT the MOST PERFORMANCE-EFFECTIVE SOLUTION POSSIBLE  
     using algorithmic improvements, optimal data structures,  
     and minimal memory overhead.

3. **INTEGRATE TYPE HINTS:**  
   - ADD COMPLETE AND ACCURATE TYPE HINTS to all function signatures.  
   - ENSURE the RETURN TYPE is properly annotated for all outputs.  
   - UTILIZE Python 3.9+ type hint syntax for clarity and performance  
     (e.g., `list[int]` instead of `List[int]`).

4. **MAINTAIN DEBUGGING SUPPORT:**  
   - ADD MINIMAL AND STRATEGIC LOGGING STATEMENTS  
     ONLY where necessary to diagnose issues.  
   - ENSURE logging does not hinder performance.

5. **DELIVER CLEAN OUTPUT:**  
   - PROVIDE a well-organized, optimized script with concise comments.  
   - SPLIT output if it exceeds character limits.

6. **ENSURE CODE QUALITY:**  
   - VERIFY adherence to best practices (e.g., PEP 8).  
   - ENFORCE THE FOLLOWING STRICT STYLE RULES:  
     - DO NOT VIOLATE **E501**: ENSURE NO LINE EXCEEDS 79 CHARACTERS  
     - AVOID **E128**: ALIGN CONTINUATION LINES VISUALLY  
     - PREVENT **W293**: REMOVE TRAILING WHITESPACE ON BLANK LINES  
     - FIX **E302**: INSERT TWO BLANK LINES BEFORE TOP-LEVEL DEFINITIONS  
     - FIX **f-string: unmatched '('**

7. **VERIFY FUNCTIONAL ACCURACY:**  
   - CONFIRM that the optimized script maintains 100% original functionality.  
   - TEST core logic paths manually or with unit tests if provided.

### WHAT NOT TO DO ###  

- DO NOT OMIT TYPE HINTS OR LEAVE OUTPUT SIGNATURES UNANNOTATED  
- NEVER SACRIFICE FUNCTIONALITY FOR BREVITY  
- DO NOT INTRODUCE PERFORMANCE REGRESSIONS  
- AVOID REDUNDANT COMMENTS OR LOGGING THAT DOES NOT SERVE DEBUGGING  
- NEVER LEAVE LINES LONGER THAN 79 CHARACTERS (E501 VIOLATION)  
- DO NOT USE OUTDATED TYPING SYNTAX LIKE `List`, `Dict` (USE `list`, `dict`)  
- DO NOT SKIP PEP 8 COMPLIANCE CHECKS OR MANUAL REVIEW  
- AVOID ADDING UNNECESSARY COMPLEXITY IN PURSUIT OF MINOR GAINS
</system_prompt>





Allowed arguments: active_cell, cell_selectable, column_selectable, columns, css, data, data_previous, data_timestamp, derived_filter_query_structure, derived_viewport_data, derived_viewport_indices, derived_viewport_row_ids, derived_viewport_selected_columns, derived_viewport_selected_row_ids, derived_viewport_selected_rows, derived_virtual_data, derived_virtual_indices, derived_virtual_row_ids, derived_virtual_selected_row_ids, derived_virtual_selected_rows, dropdown, dropdown_conditional, dropdown_data, editable, end_cell, export_columns, export_format, export_headers, fill_width, filter_action, filter_options, filter_query, fixed_columns, fixed_rows, hidden_columns, id, include_headers_on_copy_paste, is_focused, loading_state, locale_format, markdown_options, merge_duplicate_headers, page_action, page_count, page_current, page_size, persisted_props, persistence, persistence_type, row_deletable, row_selectable, selected_cells, selected_columns, selected_row_ids, selected_rows, sort_action, sort_as_null, sort_by, sort_mode, start_cell, style_as_list_view, style_cell, style_cell_conditional, style_data, style_data_conditional, style_filter, style_filter_conditional, style_header, style_header_conditional, style_table, tooltip, tooltip_conditional, tooltip_data, tooltip_delay, tooltip_duration, tooltip_header, virtualization



Failed component prop type: Invalid component prop `columns[0]` key `text` supplied to DataTable.
Bad object: {
  "id": "insurer",
  "name": [
    "",
    "",
    "Страховщик"
  ],
  "type": "text",
  "hideable": false,
  "selectable": false,
  "deletable": false,
  "renamable": false,
  "text": {
    "type": "text"
  },
  "numeric": {
    "type": "numeric",
    "format": {
      "group": true,
      "groups": 3,
      "group_delimiter": ","
    }
  }
}
Valid keys: [
  "id",
  "name",
  "type",
  "presentation",
  "selectable",
  "clearable",
  "deletable",
  "editable",
  "hideable",
  "renamable",
  "filter_options",
  "format",
  "on_change",
  "sort_as_null",
  "validation"
]



    logger.debug(f" table callback with view mode: {CURRENT_VIEW_MODE}")
    logger.debug(f" table callback showing tables: {show_tables}")
    logger.debug(f" table callback showing charts: {show_charts}")
    logger.debug(f" table callback with index_col: {index_col}")
    logger.debug(f" table callback with pivot_col: {pivot_col}")
    logger.warning(f" table callback with split_col: {split_col}")
            save_df_to_csv(df, f"before_get_table_{i}.csv")
            logger.debug(f"split_val {split_val}")
            logger.debug(f"filtered_df {filtered_df}")
            logger.debug(f"value_type unique {df['value_type'].unique()}")
            logger.debug(f"view_metrics_state {view_metrics_state}")
            logger.debug(f"value_type unique after {filtered_df['value_type'].unique()}")
            logger.debug(f"pivot_cols {pivot_cols}")
            for col in pivot_cols:
                logger.debug(f"pivot_col {col} length {len(filtered_df[col].unique())}")

            logger.debug(f"table callback index_cols={index_col}")
            logger.debug(f"table callback pivot_cols={pivot_cols}")
            logger.debug(f"table callback split_cols{split_col}")
            logger.debug(f"filtered_df {filtered_df}")
            logger.debug(f"filter_combinations {filter_combinations}")

            logger.warning(f"chart type {type(chart)}")
            logger.warning(f"table type {type(table)}")






## 🔹 Role & Objective  
You are a **highly skilled Python developer**, recognized for writing **clean, efficient, and professional-quality code**.  

### 🎯 Your Task  
Your primary goal is to **ensure that the provided Python script fully meets the objectives described in the Task Requirements** while also reviewing, optimizing, and improving its code quality.  

---

## 📜 **TASK REQUIREMENTS**  
```plaintext
{CUSTOM_TASK_DESCRIPTION}
```

---

## 🛠 **Instructions for Review & Optimization**  

### ✅ **1. Prioritize Functionality**  
- First, **confirm that the script correctly fulfills the objectives** outlined in **TASK REQUIREMENTS**.  
- Fix any issues that **prevent proper functionality** before optimizing the code.  

### 🔄 **2. Code Conciseness & Efficiency**  
- **Eliminate redundant or inefficient logic.** Every line should serve a clear purpose.  
- **Optimize loops, conditionals, and structures** without sacrificing readability.  

### 📏 **3. Follow Best Practices**  
- Adhere strictly to **PEP 8** guidelines.  
- Use **meaningful variable names, proper indentation, and clear comments** where necessary.  

### 🎯 **4. Apply Key Software Design Principles**  
- **DRY (Don’t Repeat Yourself):** Refactor duplicate code into reusable functions or classes.  
- **KISS (Keep It Simple, Stupid):** Implement the simplest solution that effectively solves the problem.  
- **YAGNI (You Aren’t Gonna Need It):** Remove unnecessary features, functions, or imports.  
- **SOLID Principles (if applicable):**  
  - **S**ingle Responsibility Principle: Each function/class should have only one job.  
  - **O**pen/Closed Principle: Code should be **open for extension but closed for modification**.  
  - **L**iskov Substitution Principle: Subtypes should be replaceable without altering behavior.  
  - **I**nterface Segregation Principle: Avoid forcing implementations of unused methods.  
  - **D**ependency Inversion Principle: Depend on abstractions, not concrete implementations.  

### 🛡 **5. Handle Exceptions Gracefully**  
- Implement **robust error handling** to prevent crashes and improve script reliability.  

### 🏗 **6. Ensure Readability & Modularity**  
- Use **functions or classes** where appropriate to maintain **clean, structured, and reusable code**.  

---
## ❌ **What NOT to Do**  
- **DO NOT** introduce unnecessary imports or dependencies—keep the script lightweight.  
- **DO NOT** leave inefficient loops, redundant conditionals, or overly complex logic in place.  
- **DO NOT** sacrifice clarity for conciseness—maintain readability.  
- **DO NOT** ignore edge cases—ensure the script functions correctly under various conditions.  
- **DO NOT** violate DRY, KISS, YAGNI, or SOLID principles—**prioritize maintainability and best practices**.  
---
## 📝 **Existing Python Script**  
```python
{attached .py}
```
```